%图形为一个16面体，由上下两个顶点和中间8个顶点组成
%输入x，即对角线长度。points_sol为原来的点的位置。
%输出error，即通过点1->2->3->4->5和通过点1->8->7->6->5两条路径计算的点3的位置的差。
%result即为点5的位置
%不过这程序的主要问题在于开根号时可以选取两个值，但是程序中只能指定选取一个。
function [error,result]=dis8(x,points_sol)
%l为边长，通过输入的原图形计算出来
faces=[1 2 9;2 3 9;3 4 9;4 5 9;5 6 9;6 7 9;7 8 9;8 1 9;1 2 10;2 3 10;3 4 10;4 5 10;5 6 10;6 7 10;7 8 10;8 1 10];
length=edge_length(faces,points_sol).^2;
l=zeros(size(points_sol,1),size(points_sol,1));
for i=1:size(faces,1)
    for j=1:3
        l(faces(i,mod(j-1,3)+1),faces(i,mod(j,3)+1))=length(i,j);
        l(faces(i,mod(j,3)+1),faces(i,mod(j-1,3)+1))=length(i,j);
    end
end
%计算6个点的位置，6个点的连接关系存储在faces里
%先固定对角线的两个端点，即编号为5和5的两个点。
points=zeros(10,3);
points(9,:)=[0 0 x/2];
points(10,:)=[0 0 -x/2];
%固定点1的y坐标为0，即固定了三角形(1,9,10)。然后计算点1的位置。
z1=(l(1,10)-l(1,9))/(2*x);
x1=-sqrt(l(1,9)-(z1-x/2)^2);
points(1,:)=[x1 0 z1];
%通过点1,9,10的位置和边长计算点2的位置
z2=(l(2,10)-l(2,9))/(2*x);
k=(l(2,9)-(z2-x/2)^2)-(l(1,2)-(z2-z1)^2);
x2=(k+x1^2)/(2*x1);
y2=sqrt(l(2,9)-(z2-x/2)^2-x2^2);
points(2,:)=[x2 y2 z2];
%通过点2,9,10的位置和边长计算点3的位置
z3=(l(3,10)-l(3,9))/(2*x);
k=(l(3,9)-(z3-x/2)^2)-(l(2,3)-(z3-z2)^2);
c=l(3,9)-(z3-x/2)^2-((k+x2^2+y2^2)/(2*y2))^2;
b=x2*(k+x2^2+y2^2)/(y2^2);
a=1+(x2/y2)^2;
x3=(b+sqrt(b^2+4*a*c))/(2*a);
y3=(k+x2^2+y2^2-2*x2*x3)/(2*y2);
points(3,:)=[x3 y3 z3];
%通过点3,9,10的位置和边长计算点4的位置
z4=(l(4,10)-l(4,9))/(2*x);
k=(l(4,9)-(z4-x/2)^2)-(l(3,4)-(z4-z3)^2);
c=l(4,9)-(z4-x/2)^2-((k+x3^2+y3^2)/(2*y3))^2;
b=x3*(k+x3^2+y3^2)/(y3^2);
a=1+(x3/y3)^2;
x4=(b+sqrt(b^2+4*a*c))/(2*a);
y4=(k+x3^2+y3^2-2*x3*x4)/(2*y3);
points(4,:)=[x4 y4 z4];
%通过点9,10,4的位置和边长计算点5的位置
z5=(l(5,10)-l(5,9))/(2*x);
k=(l(5,9)-(z5-x/2)^2)-(l(4,5)-(z5-z4)^2);
c=l(5,9)-(z5-x/2)^2-((k+x4^2+y4^2)/(2*y4))^2;
b=x4*(k+x4^2+y4^2)/(y4^2);
a=1+(x4/y4)^2;
x5=(b+sqrt(b^2+4*a*c))/(2*a);
y5=(k+x4^2+y4^2-2*x4*x5)/(2*y4);
points(5,:)=[x5 y5 z5];
%通过点9,10,1的位置和边长计算点8的位置
z8=(l(8,10)-l(8,9))/(2*x);
k=(l(8,9)-(z8-x/2)^2)-(l(1,8)-(z8-z1)^2);
x8=(k+x1^2)/(2*x1);
y8=-sqrt(l(8,9)-(z8-x/2)^2-x8^2);
points(8,:)=[x8 y8 z8];
%通过点9,10,8的位置和边长计算点7的位置
z7=(l(7,10)-l(7,9))/(2*x);
k=(l(7,9)-(z7-x/2)^2)-(l(8,7)-(z7-z8)^2);
c=l(7,9)-(z7-x/2)^2-((k+x8^2+y8^2)/(2*y8))^2;
b=x8*(k+x8^2+y8^2)/(y8^2);
a=1+(x8/y8)^2;
x7=(b+sqrt(b^2+4*a*c))/(2*a);
y7=(k+x8^2+y8^2-2*x8*x7)/(2*y8);
points(7,:)=[x7 y7 z7];
%通过点9,10,7的位置和边长计算点6的位置
z6=(l(6,10)-l(6,9))/(2*x);
k=(l(6,9)-(z6-x/2)^2)-(l(7,6)-(z6-z7)^2);
c=l(6,9)-(z6-x/2)^2-((k+x7^2+y7^2)/(2*y7))^2;
b=x7*(k+x7^2+y7^2)/(y7^2);
a=1+(x7/y7)^2;
x6=(b+sqrt(b^2+4*a*c))/(2*a);
y6=(k+x7^2+y7^2-2*x7*x6)/(2*y7);
points(6,:)=[x6 y6 z6];
%通过点9,10,6的位置和边长计算点5的位置
z5=(l(5,10)-l(5,9))/(2*x);
k=(l(5,9)-(z5-x/2)^2)-(l(6,5)-(z5-z6)^2);
c=l(5,9)-(z5-x/2)^2-((k+x6^2+y6^2)/(2*y6))^2;
b=x6*(k+x6^2+y6^2)/(y6^2);
a=1+(x6/y6)^2;
x5=(b+sqrt(b^2+4*a*c))/(2*a);
y5=(k+x6^2+y6^2-2*x6*x5)/(2*y6);
%error即即通过点1->2->3->4->5和通过点1->8->7->6->5两条路径计算的点3的位置的差。当error为0
%时即表示所有的边长符合条件。虽然这样计算得来的图形与原图形大概率不一样。
error=abs((x5-points(5,1)))^2+abs(y5-points(5,2))^2+abs(z5-points(5,3))^2;
result=[x5 y5 z5];
